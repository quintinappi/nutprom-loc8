rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if the user is an admin
    function isAdmin() {
      return firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Company logos rules
    match /company-logos/users/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   (request.auth.uid == userId || isAdmin()) &&
                   request.resource.size < 2 * 1024 * 1024 &&
                   request.resource.contentType.matches('image/.*');
    }

    // Default rule - deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == userId || request.auth.token.admin == true);
    }
    
    // Timesheets
    match /timesheets/{timesheetId} {
      allow read: if request.auth != null && (
        resource.data.employeeId == request.auth.uid || 
        request.auth.token.admin == true || 
        request.auth.token.supervisor == true
      );
      
      allow create: if request.auth != null && (
        request.resource.data.employeeId == request.auth.uid || 
        request.auth.token.admin == true
      );
      
      allow update: if request.auth != null && (
        (resource.data.employeeId == request.auth.uid && 
         request.resource.data.status in ['pending_supervisor', 'draft']) ||
        request.auth.token.admin == true ||
        request.auth.token.supervisor == true
      );
    }
  }
}
